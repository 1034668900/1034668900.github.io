import{_ as t,p as r,q as o,a1 as e}from"./framework-6700cb35.js";const n={},s=e('<h1 id="fetch简介" tabindex="-1"><a class="header-anchor" href="#fetch简介" aria-hidden="true">#</a> Fetch简介</h1><ul><li>ajax在得到数据后对其处理时，如果处理的步骤较繁琐的话，就会在内部不断的嵌套，不利于维护 ，但是通过fetch可以解决该问 题，fetch是一个函数，其返回结果是一个promise</li><li>fetch是ajax的升级版，采用的是Promise API，因此fetch也是异步的</li><li>fetch是原生js就支持的一种ajax请求方式</li></ul><h2 id="fetch的使用" tabindex="-1"><a class="header-anchor" href="#fetch的使用" aria-hidden="true">#</a> <strong>fetch的使用</strong></h2><ul><li>fetch(访问路径，配置对象)，其返回结果是一个<strong>promise</strong>，因此，</li><li><strong>处理方式一</strong>： 可以通过.then的方式来读取数据，可以通过.catch的方式来处理异常</li><li><strong>处理方式二</strong>： 可以通过async和await来处理，但是将promise转换为async和await处理时一定要使用try{ }catch(e){ }的方式来处理异常</li></ul><h2 id="fetch配置对象说明" tabindex="-1"><a class="header-anchor" href="#fetch配置对象说明" aria-hidden="true">#</a> <strong>fetch配置对象说明</strong></h2><ul><li>在fetch的配置对象中，可以指定<strong>method</strong>(访问方法),<strong>headers</strong>(请求头),<strong>body</strong>(请求体),<strong>signal</strong>(处理信号）等等属性 <strong>fetch终止请求</strong></li><li>有时使用fetch发送一个请求后，如果服务器内部没有对该请求进行响应，那么该请求的状态一直是待处理，此时可以通过<strong>AbortController</strong>接口里的<strong>abort</strong>方法终止该请求</li><li><strong>使用步骤</strong>：</li></ul><ol><li><strong>创建接口实例对象</strong> const controll = new AbortController( )</li><li><strong>在fetch的配置对象中添加属性</strong> { signal: controll.signal }</li><li><strong>通过实例对象controll调用abort方法终止请求</strong> controll.abort()</li></ol>',7),l=[s];function a(c,i){return r(),o("div",null,l)}const g=t(n,[["render",a],["__file","Fetch简介.html.vue"]]);export{g as default};
