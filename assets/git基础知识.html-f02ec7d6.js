import{_ as n,p as s,q as a,a1 as i}from"./framework-6700cb35.js";const t={},e=i(`<h1 id="git基础知识" tabindex="-1"><a class="header-anchor" href="#git基础知识" aria-hidden="true">#</a> git基础知识</h1><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h2><ul><li><strong>name</strong><ul><li>git config --global user.name &quot;用户名&quot;</li></ul></li><li><strong>email</strong><ul><li>git config --global user.email &quot;邮箱&quot;</li></ul></li></ul><h2 id="文件状态" tabindex="-1"><a class="header-anchor" href="#文件状态" aria-hidden="true">#</a> 文件状态</h2><ul><li>git中的文件有两种状态：<strong>未跟踪</strong>和<strong>已跟踪</strong>。跟踪指该文件被git所管理，已跟踪的文件又有三种状态：<strong>未修改、修改和暂存。</strong></li><li><strong>暂存</strong>，表示文件修改已经保存，但是尚未提交到git仓库。</li><li><strong>未修改</strong>，表示磁盘中的文件和git仓库中文件相同，没有修改。</li><li><strong>已修改</strong>，表示磁盘中文件已被修改，和git仓库中文件不同。</li><li>可以通过 <code>git status</code> 来查看文件状态</li></ul><h2 id="使用git" tabindex="-1"><a class="header-anchor" href="#使用git" aria-hidden="true">#</a> 使用git</h2><ul><li><strong>git status</strong><ul><li>查看当前仓库状态</li></ul></li><li><strong>git init</strong><ul><li>初始化仓库</li></ul></li><li>刚添加到项目中的文件属于 未跟踪 的状态</li><li><strong>git add （filename）</strong><ul><li>将文件从 未跟踪 --） <strong>暂存</strong> 的状态</li></ul></li><li><strong>git add</strong> * 或 git add . 将所有 未跟踪 (<strong>已修改</strong>)文件 --） <strong>暂存</strong>状态</li><li><strong>git commit -m</strong> &quot;注释信息&quot; <ul><li>将<strong>暂存</strong>的文件存储到仓库中</li><li>文件状态从 <strong>暂存</strong>--）<strong>未修改</strong></li></ul></li><li><strong>git commit -a -m</strong> &quot;注释&quot; 提交所有<strong>已修改</strong>的文件(未跟踪文件不会提交) <ul><li>修改被跟踪的文件内容后</li><li>文件状态从 <strong>未修改</strong>·--） <strong>已修改</strong></li><li><strong>已修改</strong>内容要提交需要先通过git add filename <strong>暂存</strong>，</li><li>然后git commit 将其--）<strong>未修改</strong></li></ul></li><li><strong>git restore （filename）</strong><ul><li>重置文件 <strong>git restore --staged （filename）</strong></li><li>将文件从<strong>暂存</strong>状态取消</li></ul></li><li><strong>git rm （filename）</strong><ul><li>删除文件</li></ul></li><li><strong>git rm （filename） -f</strong><ul><li>强制删除</li></ul></li><li><strong>git mv from to</strong><ul><li><code>eg: git mv .\\1.txt .\\2.txt</code></li><li>移动文件 重命名文件</li></ul></li><li><strong>git rm -r --force .</strong><ul><li>清空本地仓库</li><li>简写 <code>git rm -r -f .</code></li></ul></li></ul><h2 id="分支-branch" tabindex="-1"><a class="header-anchor" href="#分支-branch" aria-hidden="true">#</a> 分支(branch)</h2><ul><li><p>git在存储文件时，<strong>每一次代码的提交都会创建一个与之对应的节点</strong>，git就是<strong>通过一个一个的节点来记录代码的状态的</strong>。节点会构成一个树状结构，树状结构就意味着这个树会存在分支，默认情况下仓库只有一个分支，命名为master。在使用git时，可以创建多个分支，分支与分支之间相互独立，在一个分支上修改代码不会影响其它的分支。因此在开发时都是在自己的分支上编写代码，测试完毕后才合并到主分支。</p></li><li><p><strong>git branch</strong></p><ul><li>查看分支</li></ul></li><li><p><strong>git branch （branch name）</strong></p><ul><li>创建分支</li></ul></li><li><p><strong>git branch -d （branch name）</strong></p><ul><li>删除分支</li></ul></li><li><p><strong>git switch （branch name）</strong></p><ul><li>切换至（branch name）分支</li></ul></li><li><p><strong>git switch -c （branch name）</strong></p><ul><li>创建并切换至该分支</li></ul></li></ul><h2 id="合并-merge" tabindex="-1"><a class="header-anchor" href="#合并-merge" aria-hidden="true">#</a> 合并(merge)</h2><ul><li><strong>git merge （branch name）</strong><ul><li>将（branch name）分支合并到当前分支</li><li>若当前分支与带合并分支在一条线上触发快速合并 即 --&gt; 直接将当前分支指向（branch name）分支的最后</li></ul></li></ul><h2 id="变基-rebase" tabindex="-1"><a class="header-anchor" href="#变基-rebase" aria-hidden="true">#</a> 变基(rebase)</h2><ul><li>在开发中除了通过merge来合并分支外，还可以通过变基来完成分支的合并。 我们通过merge合并分支时，在提交记录中会将所有的分支创建和分支合并的过程 全部都显示出来，这样当项目比较复杂时我们必须要反复的创建、合并、删除分支。 这样一来将会使得我们的代码提交记录变得极为混乱。</li><li><strong>变基原理</strong>(变基时发生了什么) <ul><li>当我们发起变基时，git会首先找到两条分支最近的共同祖先</li><li>对比当前分支相对于祖先的历史提交，并且将它们提取出来存储到一个临时文件中</li><li>将当前部分指向目标的基地</li><li>以当前基地开始，重新执行历史操作</li></ul></li><li>变基和merge对于合并分支来说最终的结果是一样的！但是变基会使得代码的提交记录 更整洁、清晰！注意！大部分情况下合并的变基是可以互换的，但是如果分支已经提交 给了远程仓库，那么这时尽量不要变基</li></ul><h2 id="远程仓库-remote" tabindex="-1"><a class="header-anchor" href="#远程仓库-remote" aria-hidden="true">#</a> 远程仓库(remote)</h2><ul><li>远程的git仓库和本地的本质没有什么区别，不同的在于远程的仓库可以同时呗多人同时 访问使用，方便我们协同开发。目前常用的库有两个：<strong>GitHub</strong>和<strong>Gitee</strong>(码云) 将本地库上传github:</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> （remote name） （url）
<span class="token function">git</span> branch <span class="token parameter variable">-M</span> main <span class="token comment"># 修改分支的名字为main</span>
<span class="token function">git</span> push <span class="token parameter variable">-u</span> （remote name） main <span class="token comment"># git push 将代码上传到服务器上</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="远程库的操作的命令" tabindex="-1"><a class="header-anchor" href="#远程库的操作的命令" aria-hidden="true">#</a> 远程库的操作的命令</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token comment"># 列出当前的关联的远程库</span>
<span class="token function">git</span> remote <span class="token function">add</span> <span class="token operator">&lt;</span>远程库名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>url<span class="token operator">&gt;</span> <span class="token comment"># 关联远程仓库</span>
<span class="token function">git</span> remote remove <span class="token operator">&lt;</span>远程库名<span class="token operator">&gt;</span>  <span class="token comment"># 删除远程库</span>
<span class="token function">git</span> push <span class="token parameter variable">-u</span> <span class="token operator">&lt;</span>远程库名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>分支名<span class="token operator">&gt;</span> <span class="token comment"># 向远程库推送代码，并和当前分支关联</span>
<span class="token function">git</span> push <span class="token operator">&lt;</span>远程库<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>本地分支<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>远程分支<span class="token operator">&gt;</span>
<span class="token function">git</span> clone <span class="token operator">&lt;</span>url<span class="token operator">&gt;</span> <span class="token comment"># 从远程库下载代码</span>

<span class="token function">git</span> push <span class="token comment"># 如果本地的版本低于远程库，push默认是推不上去</span>
<span class="token function">git</span> fetch <span class="token comment"># 要想推送成功，必须先确保本地库和远程库的版本一致，fetch它会从远程仓库下载所有代码，但是它不会将代码和当前分支自动合并</span>
            <span class="token comment"># 使用fetch拉取代码后，必须要手动对代码进行合并</span>
<span class="token function">git</span> pull  <span class="token comment"># 从服务器上拉取代码并自动合并</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注意：推送代码之前，一定要先从远程库中拉取最新的代码</li></ul><h2 id="tag-标签" tabindex="-1"><a class="header-anchor" href="#tag-标签" aria-hidden="true">#</a> tag 标签</h2><ul><li><p>当头指针没有执行某个分支的头部时，这种状态我们称为分离头指针（HEAD detached），分离头指针的状态下也可以操作操作代码，但是这些操作不会出现在任何的分支上，所以注意不要再分离头指针的状态下来操作仓库。</p></li><li><p>如果非得要回到后边的节点对代码进行操作，则可以选择创建分支后再操作</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> switch <span class="token parameter variable">-c</span> <span class="token operator">&lt;</span>分支名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>提交id<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>可以为提交记录设置标签，设置标签以后，可以通过标签快速的识别出不同的开发节点：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> tag
<span class="token function">git</span> tag 版本
<span class="token function">git</span> tag 版本 提交id
<span class="token function">git</span> push 远程仓库 标签名
<span class="token function">git</span> push 远程仓库 <span class="token parameter variable">--tags</span>
<span class="token function">git</span> tag <span class="token parameter variable">-d</span> 标签名 <span class="token comment"># 删除标签</span>
<span class="token function">git</span> push 远程仓库 <span class="token parameter variable">--delete</span> 标签名 <span class="token comment"># 删除远程标签</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="gitignore" tabindex="-1"><a class="header-anchor" href="#gitignore" aria-hidden="true">#</a> gitignore</h2><ul><li>默认情况下，git 会监视项目中所有内容，但是有些内容比如 node_modules 目录中的内容，我们不希望它被 git 所管理。我们可以在项目目录中添加一个<code>.gitignore</code>文件，来设置那些需要 git 忽略的文件。</li></ul><h2 id="github-的静态页面" tabindex="-1"><a class="header-anchor" href="#github-的静态页面" aria-hidden="true">#</a> github 的静态页面</h2><ul><li>在 github 中，可以将自己的静态页面直接部署到 github 中，它会给我们提供一个地址使得我们的页面变成一个真正的网站，可以供用户访问。</li><li>要求： <ul><li>静态页面的分支必须叫做：gh-pages</li><li>如果希望页面可以通过 xxx.github.io 访问，则需要将库的名字配置为 xxx.github.io</li></ul></li></ul>`,28),l=[e];function r(o,g){return s(),a("div",null,l)}const p=n(t,[["render",r],["__file","git基础知识.html.vue"]]);export{p as default};
