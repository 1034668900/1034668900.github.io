import{_ as n,p as s,q as a,a1 as t}from"./framework-6700cb35.js";const o={},p=t(`<ul><li><p><strong>标准的内置对象复制操作</strong></p><ol><li><strong>对于浅拷贝</strong>：有选择的更改对象中引用类型元素的值时，会导致源对象对应的值被修改</li><li><strong>对于深拷贝</strong>：对拷贝对象无论如何操作都不会影响源对象</li></ol></li><li><p><strong>浅拷贝创建的理解</strong>：</p><blockquote><p>浅拷贝可以理解为拷贝的是源对象的<strong>属性值</strong>，当属性值中是一个<strong>引用数据类型的地址值</strong>时，新的拷贝对象修改该地址值对应的对象的数据时，源对象也会受影响</p></blockquote></li><li><p><strong>浅拷贝的创建</strong>：</p><blockquote><p>（展开语法、Array.prototype.concat( )、Array.prototype.slice( )、Array.from( )、Object.assign( ) 和 Object.create( )）<strong>不创建深拷贝</strong>（相反，它们<strong>创建浅拷贝</strong>），<strong>对于浅拷贝，有选择地更改对象中现有元素的引用属性的值与给现有元素赋一个全新的值是不同的，理解这一点很重要</strong>。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;fc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ly&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token comment">// 浅拷贝</span>
  <span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// 有选择的修改引用类型属性</span>
  arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;ly&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;fc&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token comment">// [&quot;1&quot;, {list: [&quot;ly&quot;, &quot;fc&quot;]}]   源对象被修改了</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我是修改了arr2后的arr1:&quot;</span><span class="token punctuation">,</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>深拷贝创建方式</strong>:</p><blockquote><p>如果一个 JavaScript 对象可以被序列化，则存在一种创建深拷贝的方式：<br> 1. 使用 JSON.stringify() 将该对象转换为 JSON 字符串<br> 2. 然后使用 JSON.parse() 将该字符串转换回（全新的）JavaScript 对象</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 深拷贝</span>
<span class="token keyword">let</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;fc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ly&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> arr4 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我是刚刚深拷贝arr3的arr4: &quot;</span><span class="token punctuation">,</span>arr4<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// [&quot;1&quot;, {list: [&quot;fc&quot;, &quot;ly&quot;]}]</span>

arr4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;ly&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;fc&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我是arr4修改后的arr3: &quot;</span><span class="token punctuation">,</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// [&quot;1&quot;, {list: [&quot;fc&quot;, &quot;ly&quot;]}]  此时源对象就没受影响了</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,1),c=[p];function e(l,u){return s(),a("div",null,c)}const r=n(o,[["render",e],["__file","浅拷贝和深拷贝.html.vue"]]);export{r as default};
