import{_ as t,p as e,q as n,a1 as a}from"./framework-6700cb35.js";const s={},r=a(`<h1 id="响应式布局" tabindex="-1"><a class="header-anchor" href="#响应式布局" aria-hidden="true">#</a> 响应式布局</h1><h2 id="视口" tabindex="-1"><a class="header-anchor" href="#视口" aria-hidden="true">#</a> 视口</h2><h3 id="pc端" tabindex="-1"><a class="header-anchor" href="#pc端" aria-hidden="true">#</a> PC端</h3><ul><li>视口指的是浏览器的可视区域（包括滚动条）</li></ul><h3 id="移动端" tabindex="-1"><a class="header-anchor" href="#移动端" aria-hidden="true">#</a> 移动端</h3><ul><li>视口指的就是布局视口（同样包括滚动条）</li></ul><h2 id="视口单位" tabindex="-1"><a class="header-anchor" href="#视口单位" aria-hidden="true">#</a> 视口单位</h2><h3 id="vw-viewport-width" tabindex="-1"><a class="header-anchor" href="#vw-viewport-width" aria-hidden="true">#</a> vw（Viewport Width）</h3><ul><li><strong>相对于视口的宽度，视口被均分为100单位的vw，1vw等于视口宽度的1%</strong></li></ul><h3 id="vh-viewport-height" tabindex="-1"><a class="header-anchor" href="#vh-viewport-height" aria-hidden="true">#</a> vh（Viewport Height）</h3><ul><li><strong>相对于视口的高度，视口被均分为100单位的vh，1vh等于视口高度的1%</strong></li></ul><h3 id="vmin-viewport-min" tabindex="-1"><a class="header-anchor" href="#vmin-viewport-min" aria-hidden="true">#</a> vmin（Viewport min）</h3><ul><li>选取vw和vh中<strong>最小</strong>的那个</li></ul><h3 id="vmax-viewport-max" tabindex="-1"><a class="header-anchor" href="#vmax-viewport-max" aria-hidden="true">#</a> vmax（Viewport max）</h3><ul><li>选取vw和vh中<strong>最大</strong>的那个</li></ul><h2 id="视口单位与px之间的转换" tabindex="-1"><a class="header-anchor" href="#视口单位与px之间的转换" aria-hidden="true">#</a> 视口单位与px之间的转换</h2><h3 id="vw" tabindex="-1"><a class="header-anchor" href="#vw" aria-hidden="true">#</a> vw</h3><ul><li>vw这个单位始终相当于视口宽度的1%</li><li>将<strong>视口宽度像素除以100</strong>就是一个<strong>vw</strong></li></ul><h3 id="vh同理" tabindex="-1"><a class="header-anchor" href="#vh同理" aria-hidden="true">#</a> vh同理</h3><h2 id="视口单位与百分比的区别" tabindex="-1"><a class="header-anchor" href="#视口单位与百分比的区别" aria-hidden="true">#</a> 视口单位与百分比的区别</h2><ol><li>百分比是基于<strong>父元素</strong>的宽度、高度的百分比的，而vw、vh是根据<strong>视口</strong>的宽度、高度的百分比</li><li>在百分比与vw获取的都是页面宽高时，视口单位优势在于<strong>vh</strong>能够直接获取高度，而用<strong>百分比</strong>在没有设置body高度的情况下，无法正确获取可视区域的高度</li><li>当页面有<strong>滚动条</strong>时，在<strong>百分比</strong>和<strong>视口单位</strong>获取的都是相同的宽高时，<strong>100%<strong>是</strong>不包含滚动条</strong>的，而<strong>100vw是</strong>包含滚动条的宽**的</li></ol><h2 id="em-和-rem" tabindex="-1"><a class="header-anchor" href="#em-和-rem" aria-hidden="true">#</a> em 和 rem</h2><h3 id="em" tabindex="-1"><a class="header-anchor" href="#em" aria-hidden="true">#</a> em</h3><ul><li><strong>em</strong>是 font size of then element 的简称，是指<strong>相对于父元素字体大小的单位</strong></li><li>em单位的主要问题是它们与元素的字体大小有关，因此它们可能会层叠起来并导致意想不到的结果</li><li><strong>HTML</strong> 的<code>font-size : 100%</code>在大多数浏览器是<strong>16px</strong></li></ul><h3 id="rem" tabindex="-1"><a class="header-anchor" href="#rem" aria-hidden="true">#</a> rem</h3><ul><li><strong>rem</strong>是 font size of then root element 的简称，是指相对于<strong>根元素</strong>的<strong>字体大小</strong>的单位</li><li>在根元素的 font-size 属性中指定时，rem单位是指属性的初始值</li><li>这意味着1rem等于html元素的字体大小（对于大多数浏览器其默认值是16px）</li></ul><h2 id="rem和px直接的转换" tabindex="-1"><a class="header-anchor" href="#rem和px直接的转换" aria-hidden="true">#</a> rem和px直接的转换</h2><h3 id="_62-5转换" tabindex="-1"><a class="header-anchor" href="#_62-5转换" aria-hidden="true">#</a> 62.5转换</h3><ul><li>通常使用rem单位来定义文字的大小最大的问题就是这些<strong>值有点难用</strong></li><li>例如： <ol><li>10px = 0.625rem （10 / 16 = 0.625）</li><li>12px = 0.75rem</li><li>14px = 0.875rem</li><li>...</li></ol></li><li>由此可见，这样计算出来的值不易于使用</li><li>我们通常将HTML的字体大小设置为62.5%<code>html{font-size: 62.5%}</code>，这样其对应的值就是10px，我们再对所需要的像素进行转换时就和根元素字体大小的关系就是<strong>十分之一</strong>的关系</li><li>例如： <ol><li>10px = 1rem</li><li>12px = 1.2rem</li><li>14px = 1.4rem</li><li>...</li></ol></li></ul><h3 id="_62-5转换的缺陷" tabindex="-1"><a class="header-anchor" href="#_62-5转换的缺陷" aria-hidden="true">#</a> 62.5转换的缺陷</h3><ul><li>rem单位常用于手机端，而市面上的手机型号众多，手机宽度各不相同，因此只用62.5进行换算的话，所有比例都是1：10，还是固定的</li></ul><h3 id="理想状态" tabindex="-1"><a class="header-anchor" href="#理想状态" aria-hidden="true">#</a> 理想状态</h3><ul><li>当手机宽度变大时，字体也能跟着变大，手机宽度变小时，字体也可以跟着变小</li></ul><h2 id="rem布局的方法" tabindex="-1"><a class="header-anchor" href="#rem布局的方法" aria-hidden="true">#</a> rem布局的方法</h2><ul><li>引入rem375.js文件（这个文件以375px为基准，将其转换为100px，当屏幕变大、变小时，它也会跟着转换）</li><li>将<strong>需要使用的px像素除以100</strong>就是对应的rem<code>例如： 20px 对应 0.2rem</code></li></ul><h2 id="媒体查询" tabindex="-1"><a class="header-anchor" href="#媒体查询" aria-hidden="true">#</a> 媒体查询</h2><h3 id="媒体类型" tabindex="-1"><a class="header-anchor" href="#媒体类型" aria-hidden="true">#</a> 媒体类型</h3><table><thead><tr><th style="text-align:center;">1</th><th style="text-align:center;">all</th><th style="text-align:center;">适用于所有设备</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>2</strong></td><td style="text-align:center;"><strong>print</strong></td><td style="text-align:center;"><strong>适用于在打印预览的模式下</strong></td></tr><tr><td style="text-align:center;"><strong>3</strong></td><td style="text-align:center;"><strong>screen</strong></td><td style="text-align:center;"><strong>主要用于屏幕</strong></td></tr><tr><td style="text-align:center;"><strong>4</strong></td><td style="text-align:center;"><strong>speech</strong></td><td style="text-align:center;"><strong>主要用于语音合成器</strong></td></tr></tbody></table><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
    <span class="token atrule"><span class="token rule">@media</span> 媒体类型</span> <span class="token punctuation">{</span>
        内部的效果会在对应媒体类型设备下生效
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="媒体特性" tabindex="-1"><a class="header-anchor" href="#媒体特性" aria-hidden="true">#</a> 媒体特性</h3><table><thead><tr><th style="text-align:center;">1</th><th style="text-align:center;">width</th><th style="text-align:center;">视口宽度，有 max-width 与 min-width</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>2</strong></td><td style="text-align:center;"><strong>height</strong></td><td style="text-align:center;"><strong>视口高度，有 max-height 与 min-height</strong></td></tr><tr><td style="text-align:center;"><strong>3</strong></td><td style="text-align:center;"><strong>aspect-ratio</strong></td><td style="text-align:center;"><strong>视口的宽高比</strong></td></tr><tr><td style="text-align:center;"><strong>4</strong></td><td style="text-align:center;"><strong>orientation</strong></td><td style="text-align:center;"><strong>视口的旋转方向，有 portrait(竖屏) 与 landscape(横屏)两种</strong></td></tr></tbody></table><h3 id="使用-1" tabindex="-1"><a class="header-anchor" href="#使用-1" aria-hidden="true">#</a> 使用</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
    <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span>媒体特性<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
        内部效果会在对应媒体特性下生效
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="逻辑操作符" tabindex="-1"><a class="header-anchor" href="#逻辑操作符" aria-hidden="true">#</a> 逻辑操作符</h3><table><thead><tr><th style="text-align:center;">1</th><th style="text-align:center;">and</th><th style="text-align:center;">用于将多个媒体查询规则组成单挑媒体查询</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>2</strong></td><td style="text-align:center;"><strong>not</strong></td><td style="text-align:center;"><strong>用于否定媒体查询，即不满足该条件则执行内容</strong></td></tr><tr><td style="text-align:center;"><strong>3</strong></td><td style="text-align:center;"><strong>only</strong></td><td style="text-align:center;"><strong>用于旧版浏览器识别媒体类型使用</strong>(已不常用)</td></tr><tr><td style="text-align:center;"><strong>4</strong></td><td style="text-align:center;"><strong>逗号</strong></td><td style="text-align:center;"><strong>用于将多个媒体查询合并为一个规则</strong></td></tr></tbody></table><h3 id="使用-2" tabindex="-1"><a class="header-anchor" href="#使用-2" aria-hidden="true">#</a> 使用</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
    <span class="token atrule"><span class="token rule">@media</span> 逻辑操作符<span class="token punctuation">(</span><span class="token keyword">not</span><span class="token punctuation">)</span> 媒体类型<span class="token punctuation">(</span>媒体特性<span class="token punctuation">)</span> 逻辑操作符 媒体类型<span class="token punctuation">(</span>媒体特性<span class="token punctuation">)</span></span><span class="token punctuation">{</span>
        内部效果会在满足上述条件下生效
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="通过link标签添加media属性" tabindex="-1"><a class="header-anchor" href="#通过link标签添加media属性" aria-hidden="true">#</a> 通过link标签添加media属性</h3><ul><li><code>eg: &lt;link href=&quot;css/a.css&quot; media=&quot;媒体类型(媒体特性)&quot;&gt;&lt;/link&gt;</code></li><li><code>eg: &lt;link href=&quot;css/b.css&quot; media=&quot;媒体类型(媒体特性)&quot;&gt;&lt;/link&gt;</code></li><li>可实现<strong>不同条件加载不同的css</strong></li></ul><h2 id="响应式断点-阈值" tabindex="-1"><a class="header-anchor" href="#响应式断点-阈值" aria-hidden="true">#</a> 响应式断点（阈值）</h2><h3 id="编写位置" tabindex="-1"><a class="header-anchor" href="#编写位置" aria-hidden="true">#</a> 编写位置</h3><ul><li>添加到样式表底部，对css进行优先级的覆盖</li></ul><h3 id="阈值设定" tabindex="-1"><a class="header-anchor" href="#阈值设定" aria-hidden="true">#</a> 阈值设定</h3>`,54),i=[r];function l(d,o){return e(),n("div",null,i)}const c=t(s,[["render",l],["__file","响应式布局.html.vue"]]);export{c as default};
