import{_ as n,p as s,q as a,a1 as e}from"./framework-6700cb35.js";const o={},t=e(`<h1 id="web-workers" tabindex="-1"><a class="header-anchor" href="#web-workers" aria-hidden="true">#</a> Web Workers</h1><h2 id="分线程的意义" tabindex="-1"><a class="header-anchor" href="#分线程的意义" aria-hidden="true">#</a> 分线程的意义</h2><blockquote><p>当在浏览器端用户交互需要处理大量数据时，在主线程参与运算过程中，用户对页面进行任何操作都没有响应，很影响用户体验，此时就可以利用H5提供的Web Workers多线程来将主线程需要进行大量运算的代码添加到分线程中进行运算，这样即使运算过程中用户也依然可以的页面进行操作:</p></blockquote><h2 id="web-workers使用步骤" tabindex="-1"><a class="header-anchor" href="#web-workers使用步骤" aria-hidden="true">#</a> Web Workers使用步骤</h2><ul><li><strong>注意</strong>： 分线程是单独创建的一个js文件，且Window的方法在这里不能调用，因为在分线程里全局对象不是Window,而是<code>DedicatedWorkerGlobalScope</code>，因此在分线程中不能更新界面，这是特意这样设计的，就是为了防止js多线程对同一个对象处理时复杂得到同步问题</li><li><strong>缺点</strong><ol><li>慢 ,直接在主线程计算会更快，但是在主线程计算过程会冻结界面，但是分线程计算不会阻塞界面</li><li>不能跨域加载js</li><li>分线程里代码不能访问window全局对象</li><li>不是所有浏览器都支持</li></ol></li><li>使用 <ol><li>主线程中创建一个worker对象,并传入分线程的url<code>eg: var worker = new Worker(&quot;worker.js&quot;);</code></li><li>主线程中绑定接收消息的监听<code>eg: worker.onmessage = function(event) { console.log(&quot;主线程接收分线程返回的数据: &quot; + event.data); }</code></li><li>主线程向分线程发送数据 由于该操作是异步进行，所有和onmessage代码没有顺序要求<code>eg: worker.postMessage(inputNum);</code></li><li>分线程接收主线程传递的数据<code>eg: var onmessage = function(event){ }</code></li><li>分线程对数据进行计算处理</li><li>分线程返回处理结果<code>eg: postMessage(result)</code></li></ol></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token operator">-</span><span class="token number">1.</span> 主线程中创建一个worker对象<span class="token punctuation">,</span>并传入分线程的url
        <span class="token literal-property property">eg</span><span class="token operator">:</span> <span class="token keyword">var</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&quot;worker.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">-</span><span class="token number">2.</span> 主线程中绑定接收消息的监听
        <span class="token literal-property property">eg</span><span class="token operator">:</span> worker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;主线程接收分线程返回的数据: &quot;</span> <span class="token operator">+</span> event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">-</span><span class="token number">3.</span> 主线程向分线程发送数据  由于该操作是异步进行，所有和onmessage代码没有顺序要求       
    <span class="token literal-property property">eg</span><span class="token operator">:</span> worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>inputNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">-</span><span class="token number">4.</span> 分线程接收主线程传递的数据
        <span class="token literal-property property">eg</span><span class="token operator">:</span> <span class="token keyword">var</span> <span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token operator">-</span><span class="token number">5.</span> 分线程对数据进行计算处理
    <span class="token operator">-</span><span class="token number">6.</span> 分线程返回处理结果
        <span class="token literal-property property">eg</span><span class="token operator">:</span> <span class="token function">postMessage</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),p=[t];function r(l,c){return s(),a("div",null,p)}const u=n(o,[["render",r],["__file","Web Workers.html.vue"]]);export{u as default};
