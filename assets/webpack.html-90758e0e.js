import{_ as n,p as s,q as a,a1 as e}from"./framework-6700cb35.js";const p={},t=e(`<h2 id="webpack" tabindex="-1"><a class="header-anchor" href="#webpack" aria-hidden="true">#</a> webpack</h2><ul><li>使前端项目更加工程化</li><li>webpack思想： <ul><li>工具本身功能追求极简，具体需要什么功能自己<strong>按需引入</strong></li><li>灵活性高</li></ul></li></ul><h3 id="基础使用" tabindex="-1"><a class="header-anchor" href="#基础使用" aria-hidden="true">#</a> 基础使用</h3><ul><li>使用步骤 <ol><li>初始化项目<code>npm init -y</code></li><li>安装依赖 1. <code>webpack</code> 2. <code>webpack-cli</code>命令行工具 3. 在项目中创建src目录，然后编写代码 4. 执行<code>npx webpack</code>对项目进行打包(注意是<code>npx</code>)</li></ol></li><li>打包的意义 <ul><li>我们在编写代码时仍然可以书写ES6及其以上语法等，但是打包后<code>webpack</code>会将项目打包，并且会将ES6及其以上语法转换为ES5的语法，以及可以将<code>less</code>、<code>sass</code>、等转换为CSS，将<code>Vue</code>、<code>React</code>、等转换为<code>js</code>。(浏览器只认识<code>js、html、css</code>)</li></ul></li><li>使用webpack的注意事项 <ol><li>webpack里在src内写的文件是属于前端范畴，在前端运行的，因此遵循的是<code>ES6模块化的规范</code></li><li>除src以外的文件是在node中运行的，例如在其配置文件<code>webpack.config.js</code>内遵循的是<code>Commonjs模块化的规范</code></li><li>webpack中引入其他模块，但是没有使用内部的方法，这些方法不会被打包，但是如果其他模块内部有些代码要执行，那么即使引入了不使用，那些代码打包时也会一并打包</li><li>默认情况下webpack只能打包<code>js</code>，想要打包其他类型的文件需要配置<code>loader</code></li></ol></li></ul><h3 id="webpack的配置文件" tabindex="-1"><a class="header-anchor" href="#webpack的配置文件" aria-hidden="true">#</a> webpack的配置文件</h3><ul><li><p>mode、entry、output</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">//设置打包模式： production 表示生产模式  development 表示开发模式</span>
    <span class="token literal-property property">mode</span><span class="token operator">:</span> production<span class="token punctuation">,</span>
    <span class="token comment">// entry用来指定打包时的入口文件  默认 &#39;./src/index.js&#39;</span>
    <span class="token comment">// 有三种写法：单文件写法、数组写法和对象写法(指定多个入口文件，不建议)</span>
    <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">/* 
    可以通过配置 output 选项，告知 webpack 如何向硬盘写入编译文件。
    注意，即使可以存在多个 entry 起点，但只能指定一个 output 配置。 
    */</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token comment">// 此配置将一个单独的 bundle.js 文件输出到 dist 目录中。</span>
        <span class="token comment">//filename: &#39;bundle.js&#39;, // 打包后的文件名</span>
        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;[name].js&#39;</span><span class="token punctuation">,</span>  <span class="token comment">// []内部是变量-name用入口文件指定的名字作为打包后的文件名</span>
        <span class="token comment">// 打包前自动清空dist目录</span>
        <span class="token literal-property property">clean</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">,</span>
        <span class="token comment">// 指定打包的目录(必须要绝对路径)</span>
        <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>loader(会对代码进行编译)</p><ul><li><p>注意：配置时配置项名字是<code>module</code></p></li><li><p>loader执行顺序：<code>从右往左、从下往上</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// loader</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 规则</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>   
            <span class="token comment">// 匹配以css结尾的</span>
            <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
            <span class="token comment">// 允许指定多个loader,只引入css-loader，没有style-loader样式不会生效</span>
            <span class="token literal-property property">use</span><span class="token operator">:</span><span class="token punctuation">[</span>
                <span class="token comment">// 注意loader顺序！！！</span>
                <span class="token punctuation">{</span><span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">// 负责使样式生效</span>
                <span class="token punctuation">{</span><span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">}</span><span class="token comment">// 负责处理import css 文件</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
              <span class="token comment">// 匹配以sass结尾的</span>
              <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.sass$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
              <span class="token comment">// 允许指定多个loader</span>
              <span class="token literal-property property">use</span><span class="token operator">:</span><span class="token punctuation">[</span>
                  <span class="token punctuation">{</span><span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                  <span class="token punctuation">{</span><span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;sass-loader&#39;</span><span class="token punctuation">}</span>
              <span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//图片等资源类型的数据,可通过type指定路径处理</span>
            <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(jpg|png|gif)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;asset/resource&#39;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>babel</p><ul><li><p>通过babel可以将新的JavaScript语法转换为旧的，提高代码的兼容性</p></li><li><p>在webpack中使用babel需要引入babel的loader</p></li><li><p>使用步骤：</p><ol><li><p>安装babel-loader：<code>npm install --save-dev @babel/core @babel/cli @babel/preset-env</code></p></li><li><p>配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
      <span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;targets&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token string-property property">&quot;edge&quot;</span><span class="token operator">:</span> <span class="token string">&quot;17&quot;</span><span class="token punctuation">,</span>
          <span class="token string-property property">&quot;firefox&quot;</span><span class="token operator">:</span> <span class="token string">&quot;60&quot;</span><span class="token punctuation">,</span>
          <span class="token string-property property">&quot;chrome&quot;</span><span class="token operator">:</span> <span class="token string">&quot;67&quot;</span><span class="token punctuation">,</span>
          <span class="token string-property property">&quot;safari&quot;</span><span class="token operator">:</span> <span class="token string">&quot;11.1&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;useBuiltIns&quot;</span><span class="token operator">:</span> <span class="token string">&quot;usage&quot;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;corejs&quot;</span><span class="token operator">:</span> <span class="token string">&quot;3.6.5&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在package.json中设置兼容列表</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string-property property">&quot;browserslist&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;defaults&quot;</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li></ul></li><li><p>插件(plugin)</p><ul><li>插件用来给webpack扩展功能，提供一些辅助功能</li><li>html-webpack-plugin <ul><li>这个插件可以在打包代码后，自动在打包目录生成HTML文件</li><li>插件内可以利用<code>template</code>指定打包时的模板</li></ul></li></ul></li></ul><h3 id="watch" tabindex="-1"><a class="header-anchor" href="#watch" aria-hidden="true">#</a> watch</h3><ul><li>启动项目时添加watch属性会对项目进行监视，一旦项目内容改变会自动重新构建</li></ul><h3 id="开发服务器" tabindex="-1"><a class="header-anchor" href="#开发服务器" aria-hidden="true">#</a> 开发服务器</h3><ul><li><p>webpack可以安装一个开发服务器，开启后代码再次运行时就可以在这个开发服务器上运行</p><p><code>npm i -D webpack-dev-server</code></p></li><li><p>在开发服务器使用后内容修改后浏览器会自动更新，不用手动更新了</p></li><li><p>可以构建时配置<code>--open</code>,这样项目启动时会自动在浏览器打开</p></li><li><p>通过<code>webpack server</code>启动项目时，不会自动将项目打包到dist，而是直接将其打包到服务器运行</p></li></ul><h3 id="sourcemap" tabindex="-1"><a class="header-anchor" href="#sourcemap" aria-hidden="true">#</a> sourceMap</h3><ul><li><p>通过配置sourceMap后，可以设置一个代码映射，代码运行时还是执行的是打包后的，但是我们此时可以通过映射的源码对代码进行修改调试</p></li><li><p>在webpack.config.js文件中添加配置<code>devtool: &quot;inline-source-map&quot;</code></p></li></ul><h2 id="vite" tabindex="-1"><a class="header-anchor" href="#vite" aria-hidden="true">#</a> Vite</h2><ul><li><p>前端项目的一个构建工具</p></li><li><p>相较于<code>Webpack</code>，<code>Vite</code>采用了不同的运行方式，运行速度更快：</p><ul><li>在开发时，并不对项目打包，而是直接采用<code>ESM</code>(ES模块)的方式来运行项目</li><li>在项目部署时，再对项目进行打包</li></ul></li><li><p>同时<code>Vite</code>使用起来更加方便</p></li><li><p>使用插件：</p><ol><li><p>下载插件</p><p><code>$ npm add -D @vitejs/plugin-legacy</code></p></li><li><p>安装插件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> legacy <span class="token keyword">from</span> <span class="token string">&#39;@vitejs/plugin-legacy&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">legacy</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">targets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;defaults&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;not IE 11&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li></ul>`,14),l=[t];function o(i,c){return s(),a("div",null,l)}const u=n(p,[["render",o],["__file","webpack.html.vue"]]);export{u as default};
